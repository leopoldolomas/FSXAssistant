//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34209
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FSXAssistantWinDesktopClient.FSXAssistantServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="APState", Namespace="http://schemas.datacontract.org/2004/07/FSXAssistantServer")]
    [System.SerializableAttribute()]
    public partial struct APState : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private double AirspeedField;
        
        private double AltitudeField;
        
        private double AltitudeHoldField;
        
        private double AutoThrottleField;
        
        private double BankAngleField;
        
        private double DesiredVerticalSpeedField;
        
        private double HeadingField;
        
        private double HeadingHoldField;
        
        private double MasterField;
        
        private double SpeedHoldField;
        
        private double VerticalSpeedField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double Airspeed {
            get {
                return this.AirspeedField;
            }
            set {
                if ((this.AirspeedField.Equals(value) != true)) {
                    this.AirspeedField = value;
                    this.RaisePropertyChanged("Airspeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double AltitudeHold {
            get {
                return this.AltitudeHoldField;
            }
            set {
                if ((this.AltitudeHoldField.Equals(value) != true)) {
                    this.AltitudeHoldField = value;
                    this.RaisePropertyChanged("AltitudeHold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double AutoThrottle {
            get {
                return this.AutoThrottleField;
            }
            set {
                if ((this.AutoThrottleField.Equals(value) != true)) {
                    this.AutoThrottleField = value;
                    this.RaisePropertyChanged("AutoThrottle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double BankAngle {
            get {
                return this.BankAngleField;
            }
            set {
                if ((this.BankAngleField.Equals(value) != true)) {
                    this.BankAngleField = value;
                    this.RaisePropertyChanged("BankAngle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double DesiredVerticalSpeed {
            get {
                return this.DesiredVerticalSpeedField;
            }
            set {
                if ((this.DesiredVerticalSpeedField.Equals(value) != true)) {
                    this.DesiredVerticalSpeedField = value;
                    this.RaisePropertyChanged("DesiredVerticalSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double Heading {
            get {
                return this.HeadingField;
            }
            set {
                if ((this.HeadingField.Equals(value) != true)) {
                    this.HeadingField = value;
                    this.RaisePropertyChanged("Heading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double HeadingHold {
            get {
                return this.HeadingHoldField;
            }
            set {
                if ((this.HeadingHoldField.Equals(value) != true)) {
                    this.HeadingHoldField = value;
                    this.RaisePropertyChanged("HeadingHold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double Master {
            get {
                return this.MasterField;
            }
            set {
                if ((this.MasterField.Equals(value) != true)) {
                    this.MasterField = value;
                    this.RaisePropertyChanged("Master");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double SpeedHold {
            get {
                return this.SpeedHoldField;
            }
            set {
                if ((this.SpeedHoldField.Equals(value) != true)) {
                    this.SpeedHoldField = value;
                    this.RaisePropertyChanged("SpeedHold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double VerticalSpeed {
            get {
                return this.VerticalSpeedField;
            }
            set {
                if ((this.VerticalSpeedField.Equals(value) != true)) {
                    this.VerticalSpeedField = value;
                    this.RaisePropertyChanged("VerticalSpeed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FSXAssistantServiceReference.IFSXAssistant")]
    public interface IFSXAssistant {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/SimConnect_Start", ReplyAction="http://tempuri.org/IFSXAssistant/SimConnect_StartResponse")]
        bool SimConnect_Start();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/SimConnect_Dispatch", ReplyAction="http://tempuri.org/IFSXAssistant/SimConnect_DispatchResponse")]
        double SimConnect_Dispatch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/SimConnect_IsClosing", ReplyAction="http://tempuri.org/IFSXAssistant/SimConnect_IsClosingResponse")]
        bool SimConnect_IsClosing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_state", ReplyAction="http://tempuri.org/IFSXAssistant/AP_stateResponse")]
        FSXAssistantWinDesktopClient.FSXAssistantServiceReference.APState AP_state();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_master", ReplyAction="http://tempuri.org/IFSXAssistant/AP_masterResponse")]
        bool AP_master();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_toggleMaster", ReplyAction="http://tempuri.org/IFSXAssistant/AP_toggleMasterResponse")]
        void AP_toggleMaster();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_autoThrottle", ReplyAction="http://tempuri.org/IFSXAssistant/AP_autoThrottleResponse")]
        bool AP_autoThrottle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_toggleAutoThrottle", ReplyAction="http://tempuri.org/IFSXAssistant/AP_toggleAutoThrottleResponse")]
        void AP_toggleAutoThrottle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_heading", ReplyAction="http://tempuri.org/IFSXAssistant/AP_headingResponse")]
        double AP_heading();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_setHeading", ReplyAction="http://tempuri.org/IFSXAssistant/AP_setHeadingResponse")]
        void AP_setHeading(double heading);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_verticalAirspeed", ReplyAction="http://tempuri.org/IFSXAssistant/AP_verticalAirspeedResponse")]
        double AP_verticalAirspeed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_desiredVerticalAirspeed", ReplyAction="http://tempuri.org/IFSXAssistant/AP_desiredVerticalAirspeedResponse")]
        double AP_desiredVerticalAirspeed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_setDesiredVerticalAirspeed", ReplyAction="http://tempuri.org/IFSXAssistant/AP_setDesiredVerticalAirspeedResponse")]
        void AP_setDesiredVerticalAirspeed(double airspeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_airspeed", ReplyAction="http://tempuri.org/IFSXAssistant/AP_airspeedResponse")]
        double AP_airspeed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_setAirspeed", ReplyAction="http://tempuri.org/IFSXAssistant/AP_setAirspeedResponse")]
        void AP_setAirspeed(double airspeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_airspeedHold", ReplyAction="http://tempuri.org/IFSXAssistant/AP_airspeedHoldResponse")]
        bool AP_airspeedHold();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_toggleSpeedHold", ReplyAction="http://tempuri.org/IFSXAssistant/AP_toggleSpeedHoldResponse")]
        void AP_toggleSpeedHold();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_headingHold", ReplyAction="http://tempuri.org/IFSXAssistant/AP_headingHoldResponse")]
        bool AP_headingHold();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_toggleHeadingHold", ReplyAction="http://tempuri.org/IFSXAssistant/AP_toggleHeadingHoldResponse")]
        void AP_toggleHeadingHold();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_altitudeHold", ReplyAction="http://tempuri.org/IFSXAssistant/AP_altitudeHoldResponse")]
        bool AP_altitudeHold();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_toggleAltitudeHold", ReplyAction="http://tempuri.org/IFSXAssistant/AP_toggleAltitudeHoldResponse")]
        void AP_toggleAltitudeHold();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_altitude", ReplyAction="http://tempuri.org/IFSXAssistant/AP_altitudeResponse")]
        double AP_altitude();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_setAltitude", ReplyAction="http://tempuri.org/IFSXAssistant/AP_setAltitudeResponse")]
        void AP_setAltitude(double altitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_maxBankAngle", ReplyAction="http://tempuri.org/IFSXAssistant/AP_maxBankAngleResponse")]
        double AP_maxBankAngle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_increaseMaxBankAngle", ReplyAction="http://tempuri.org/IFSXAssistant/AP_increaseMaxBankAngleResponse")]
        void AP_increaseMaxBankAngle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFSXAssistant/AP_decreaseMaxBankAngle", ReplyAction="http://tempuri.org/IFSXAssistant/AP_decreaseMaxBankAngleResponse")]
        void AP_decreaseMaxBankAngle();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFSXAssistantChannel : FSXAssistantWinDesktopClient.FSXAssistantServiceReference.IFSXAssistant, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FSXAssistantClient : System.ServiceModel.ClientBase<FSXAssistantWinDesktopClient.FSXAssistantServiceReference.IFSXAssistant>, FSXAssistantWinDesktopClient.FSXAssistantServiceReference.IFSXAssistant {
        
        public FSXAssistantClient() {
        }
        
        public FSXAssistantClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FSXAssistantClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FSXAssistantClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FSXAssistantClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SimConnect_Start() {
            return base.Channel.SimConnect_Start();
        }
        
        public double SimConnect_Dispatch() {
            return base.Channel.SimConnect_Dispatch();
        }
        
        public bool SimConnect_IsClosing() {
            return base.Channel.SimConnect_IsClosing();
        }
        
        public FSXAssistantWinDesktopClient.FSXAssistantServiceReference.APState AP_state() {
            return base.Channel.AP_state();
        }
        
        public bool AP_master() {
            return base.Channel.AP_master();
        }
        
        public void AP_toggleMaster() {
            base.Channel.AP_toggleMaster();
        }
        
        public bool AP_autoThrottle() {
            return base.Channel.AP_autoThrottle();
        }
        
        public void AP_toggleAutoThrottle() {
            base.Channel.AP_toggleAutoThrottle();
        }
        
        public double AP_heading() {
            return base.Channel.AP_heading();
        }
        
        public void AP_setHeading(double heading) {
            base.Channel.AP_setHeading(heading);
        }
        
        public double AP_verticalAirspeed() {
            return base.Channel.AP_verticalAirspeed();
        }
        
        public double AP_desiredVerticalAirspeed() {
            return base.Channel.AP_desiredVerticalAirspeed();
        }
        
        public void AP_setDesiredVerticalAirspeed(double airspeed) {
            base.Channel.AP_setDesiredVerticalAirspeed(airspeed);
        }
        
        public double AP_airspeed() {
            return base.Channel.AP_airspeed();
        }
        
        public void AP_setAirspeed(double airspeed) {
            base.Channel.AP_setAirspeed(airspeed);
        }
        
        public bool AP_airspeedHold() {
            return base.Channel.AP_airspeedHold();
        }
        
        public void AP_toggleSpeedHold() {
            base.Channel.AP_toggleSpeedHold();
        }
        
        public bool AP_headingHold() {
            return base.Channel.AP_headingHold();
        }
        
        public void AP_toggleHeadingHold() {
            base.Channel.AP_toggleHeadingHold();
        }
        
        public bool AP_altitudeHold() {
            return base.Channel.AP_altitudeHold();
        }
        
        public void AP_toggleAltitudeHold() {
            base.Channel.AP_toggleAltitudeHold();
        }
        
        public double AP_altitude() {
            return base.Channel.AP_altitude();
        }
        
        public void AP_setAltitude(double altitude) {
            base.Channel.AP_setAltitude(altitude);
        }
        
        public double AP_maxBankAngle() {
            return base.Channel.AP_maxBankAngle();
        }
        
        public void AP_increaseMaxBankAngle() {
            base.Channel.AP_increaseMaxBankAngle();
        }
        
        public void AP_decreaseMaxBankAngle() {
            base.Channel.AP_decreaseMaxBankAngle();
        }
    }
}
